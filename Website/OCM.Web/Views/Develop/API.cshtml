@{
    ViewBag.Title = "API Documentation";

    var siteBaseUrl = "https://openchargemap.org/site/";
    var apiBaseUrl = "https://api.openchargemap.io/v3/";
    var apiSandboxBaseUrl = "https://sandbox.api.openchargemap.io/v2/";
}

<link rel="stylesheet" href="~/Content/docs.css" type="text/css" />

<div class="row">
    <div class="col-sm-4 hidden-xs"><div id="toc" style="position:fixed;"></div></div>
    <div class="col-sm-8 col-xs-12">
        <article>
            <section>

                <h2 id="intro"><i class="fa fa-cogs"></i> The Open Charge Map API</h2>
                <div class="alert alert-danger">Use of the OCM API is subject to <a href="@Url.Action("Terms","About")" class="alert-link">terms and conditions</a>. By using the API you indicate acceptance of these terms.</div>

                <p>If you wish to export charging location data into your own systems or applications the most flexible way is to use our API, which provides an export in a variety of formats. If you wish to regularly refresh the entire dataset, please clone our data from <a href="https://github.com/openchargemap/ocm-data">GitHub</a>. You can also opt to run your own private <a href="https://github.com/openchargemap/ocm-system/tree/master/API/OCM.Net/OCM.API.Worker">API mirror</a>.</p>

                <h4>Fair Usage Policy</h4>
                <p>
                    <strong class="text text-danger">The basic API is provided as a free service with no warranty or service level agreement. Providing this API to you costs us actual money for server resources and data transfer fees. See funding: <a href="https://opencollective.com/openchargemap">https://opencollective.com/openchargemap</a></strong>
                </p>
                <p>
                    If you will be calling the API regularly (from an app or server) you <strong>must provide your API key</strong> as an <code>X-API-Key</code> header (case sensitive) or set the <code>key=YourAPIKey</code> url parameter. You should also set your http user-agent to a custom value to help identify your app.
                </p>
                <p>
                    <strong>To obtain a free API key Sign In and choose 'my apps' from the profile menu.</strong>
                </p>
                <p>Do not repeatedly call the API with duplicate queries. Debounce/throttle your API requests to minimise the work our API has to do. The API administrator (Open Charge Map) reserves the right to ban API callers (including automated banning) if callers make excessive/indescriminate use of the API, at the discretion of the OCM administrator.</p>
                
                <p>If you need to make a high volume of queries against the API please host your own API mirror or import the data into your own API.</p>

            </section>

            <section>
                <p><em>API V3 (documentation last updated Nov 2019)</em></p>
                <h3>Service Base URL: </h3>
                <p>
                    <code>@Html.Raw(apiBaseUrl)</code>
                </p>
                <p>

                    Uptime last 7 days: <a href="https://www.statuscake.com" target="_blank" title="Uptime For Last 7 Days : API Monitoring by StatusCake"><img src="https://app.statuscake.com/button/index.php?Track=41SG6hzhJW&Days=7&Design=5" /></a>
                    last 30 days: <a href="https://www.statuscake.com" target="_blank" title="Uptime For Last 30 Days : API Monitoring by StatusCake"><img src="https://app.statuscake.com/button/index.php?Track=41SG6hzhJW&Days=30&Design=5" /></a>
                </p>

                <h2 id="POI"><i class="fa fa-map-marker"></i> Retrieving POI Data</h2>
                <p>
                    <code>@Html.Raw(apiBaseUrl + "poi/")</code>
                </p>

                <h3>Example API Calls: </h3>
                <p>Return charging location information for the US in JSON format, limited to the first 10 results: <code><a href="@Html.Raw(apiBaseUrl+"poi/")?output=json&countrycode=US&maxresults=10">@Html.Raw(apiBaseUrl + "poi/")?output=json&amp;countrycode=US&amp;maxresults=10</a></code></p>
                <p>
                    The default output contains a lot of information. Here is the same call as above, but with the most compact output (formatting removed, reference data as IDs instead of full objects, null fields skipped):
                    <code><a href="@Html.Raw(apiBaseUrl+"poi/")?output=json&countrycode=US&maxresults=10&compact=true&verbose=false">@Html.Raw(apiBaseUrl + "poi/")?output=json&amp;countrycode=US&amp;maxresults=10<em>0&amp;compact=true&amp;verbose=false</em></a></code>
                </p>
                <p>Return KML format results suitable for viewing in google earth/maps etc (UK, max 500 locations): <code><a href="@Html.Raw(apiBaseUrl+"poi/")?output=kml&countrycode=GB&maxresults=50">@Html.Raw(apiBaseUrl + "poi/")?output=kml&amp;countrycode=GB&amp;maxresults=500</a></code></p>

                <p><div class="alert alert-warning">Data returned by the API has mixed licensing and applicable copyright attribution (included in results as "Data Provider"). If you require <em>Open</em> licensed data you currently must filter by <code>opendata=true</code> to return only original OCM data.</div></p>

                <h3>Service Parameters:</h3>

                <table class="table table-striped table-bordered table-condensed">
                    <tr>
                        <th>Parameter</th>
                        <th>Description</th>
                        <th>Default</th>
                    </tr>
                    <tr>
                        <td>key</td>
                        <td>Your API Key. Required for apps/services which intend to make repeated calls to the API either as a <code>key</code> parameter in the call URL or as an <code>X-API-Key</code> http header</td>
                        <td>(blank)</td>
                    </tr>
                    <tr>
                        <td>client</td>
                        <td>Optional custom identifier for your app or service (if you can't set a custom http User Agent header)</td>
                        <td>(blank)</td>
                    </tr>
                    <tr>
                        <td>output</td>
                        <td>json, geojson, xml, csv <em>JSON format is recommended as highest fidelity</em></td>
                        <td>json</td>
                    </tr>
                    <tr>
                        <td>maxresults</td>
                        <td>limit on max number of results returned</td>
                        <td>100</td>
                    </tr>
                    <tr>
                        <td>countrycode</td>
                        <td>GB, US etc. Single ISO Country Code.</td>
                        <td>(blank)</td>
                    </tr>
                    <tr>
                        <td>countryid</td>
                        <td>exact match on a given numeric country id (comma separated list)</td>
                        <td>(blank)</td>
                    </tr>
                    <tr>
                        <td>latitude</td>
                        <td>latitude reference for distance calculation</td>
                        <td>(blank)</td>
                    </tr>
                    <tr>
                        <td>longitude</td>
                        <td>longitude reference for distance calculation</td>
                        <td>(blank)</td>
                    </tr>
                    <tr>
                        <td>distance</td>
                        <td>return results based on specified distance from specified latitude/longitude</td>
                        <td>(blank)</td>
                    </tr>
                    <tr>
                        <td>distanceunit</td>
                        <td>Miles or KM</td>
                        <td>Miles</td>
                    </tr>
                    <tr>
                        <td>operatorid</td>
                        <td>exact match on a given EVSE operator id (comma separated list)</td>
                        <td>(blank)</td>
                    </tr>
                    <tr>
                        <td>connectiontypeid</td>
                        <td>exact match on a given connection type id (comma separated list)</td>
                        <td>(blank)</td>
                    </tr>

                    <tr>
                        <td>levelid</td>
                        <td>exact match on a given charging level (1-3) id (comma separated list)</td>
                        <td>(blank)</td>
                    </tr>
                    <tr>
                        <td>minpowerkw</td>
                        <td>minimum output power in kW (this information is not known for many locations)</td>
                        <td>(blank)</td>
                    </tr>
                    <tr>
                        <td>usagetypeid</td>
                        <td>exact match on a given usage type id (comma separated list)</td>
                        <td>(blank)</td>
                    </tr>
                    <tr>
                        <td>statustypeid</td>
                        <td>exact match on a given status type id (comma separated list)</td>
                        <td>(blank)</td>
                    </tr>
                    <tr>
                        <td>dataproviderid</td>
                        <td>exact match on a given data provider id id (comma separated list). Use opendata=true for only OCM provided ("Open") data.</td>
                        <td>(blank)</td>
                    </tr>
                    <tr>
                        <td>modifiedsince</td>
                        <td>POIs modified since the given date (UTC) e.g. 2016-09-15T09:30</td>
                        <td>(blank)</td>
                    </tr>
                    <tr>
                        <td>opendata</td>
                        <td>true or false. Set to true to include only Open Data licensed content, false to return only non-open licensed data. <span class="label label-warning">By default all available data is returned. You should refer to the license of the original data provider in each case.</span></td>
                        <td>(blank)</td>
                    </tr>
                    <tr>
                        <td>includecomments</td>
                        <td>true or false. Set to true to also include user comments and media items (photos) per charging location. </td>
                        <td>false</td>
                    </tr>
                    <tr>
                        <td>verbose</td>
                        <td>true or false. Set to false to get a smaller result set with null items removed. </td>
                        <td>true</td>
                    </tr>
                    <tr>
                        <td>compact</td>
                        <td>true or false. Set to true to remove reference data objects from output (just returns IDs for common reference data such as DataProvider etc). </td>
                        <td>false</td>
                    </tr>
                    <tr>
                        <td>camelcase</td>
                        <td>true or false. Set to true to get a property names in camelCase format. </td>
                        <td>false</td>
                    </tr>
                    <tr>
                        <td>callback</td>
                        <td>specify the name of the JSONP callback (if required), JSON response type only.</td>
                        <td>(blank)</td>
                    </tr>
                    <tr>
                        <td>chargepointid</td>
                        <td>exact match on a given POI id (comma separated list).</td>
                        <td>(blank)</td>
                    </tr>
                </table>

                <p>Additionally from v3 of the API onwards you can query using a bounding box, polygon or polyline (for a route etc). See <a href="https://developers.google.com/maps/documentation/utilities/polylinealgorithm">here</a> for more info on polyline encoding. :</p>
                <table class="table table-striped table-bordered table-condensed">
                    <tr>
                        <th>Parameter</th>
                        <th>Description</th>
                        <th>Default</th>
                    </tr>
                    <tr>
                        <td>boundingbox</td>
                        <td>specify top left and bottom right box corners as: (lat,lng),(lat2,lng2)</td>
                        <td>(blank)</td>
                    </tr>
                    <tr>
                        <td>polygon</td>
                        <td>Specify an encoded polyline for the polygon shape. Polygon will be automatically closed from the last point to the first point.</td>
                        <td>(blank)</td>
                    </tr>

                    <tr>
                        <td>polyline</td>
                        <td>encoded polyline, use with distance param to increase search distance along line. Polyline is expanded into a polygon to cover the search distance. </td>
                        <td>(blank)</td>
                    </tr>
                </table>
            </section>

            <section>

                <h2 id="referencedata"><i class="fa fa-table"></i> Retrieving Core Reference Data</h2>
                <p>Our core list of lookup values is termed Core Reference Data. This is the data you would require in order to present the user with Dropdown lists etc of possible values for Connection Type etc. This only returns content in JSON format.</p>
                <p>
                    <code>@Html.Raw(apiBaseUrl + "referencedata/")</code>
                </p>

                <h3>Example API Calls: </h3>
                <p>Return all reference data in JSON format: <code><a href="@Html.Raw(apiBaseUrl + "referencedata/")">@Html.Raw(apiBaseUrl + "referencedata/")</a></code></p>

                <p>
                    Optional filter parameters:
                </p>
                <table>
                    <tr>
                        <td>countryid</td>
                        <td>exact match on a given numeric country id (comma separated list)</td>
                        <td>(blank)</td>
                    </tr>
                </table>
            </section>
            <section>

                <h2 id="comments"><i class="fa fa-comment"></i> Add New Comment/Check-In</h2>
                <p>To submit a new comment or check-in again a specific POI, use the following API endpoint to POST a JSON format comment</p>
                <p>
                    <code>@Html.Raw(apiBaseUrl + "?action=comment_submission&format=json")</code>
                </p>
                <p>
                    Your JSON submission should be in the body of your POST and contain the following (for example):
                </p>
                <pre>
                <code>
{
    "ChargePointID": 12345,
    "CommentTypeID": 10,
    "UserName": "A. Nickname",
    "Comment": "This place is awesome, free cake for EV owners!",
    "Rating": 5,
    "RelatedURL": "http://awesomevplace.com",
    "CheckinStatusTypeID": 0
}</code>
            </pre>
                <p>
                    ChargePointID is the numeric OCM-ID of the POI in location. Values for CommentTypeID and CheckinStatusTypeID can be found in <a href="#referencedata">core reference data</a>.
                </p>
                <p>
                    ChargePointID, CommentTypeID and CheckinStatusTypeID are mandatory, all other fields are optional.
                </p>
                <div class="row">
                    <div class="col-sm-6">
                        <h3>Comment Types</h3>
                        <div id="api-comment-types">
                        </div>
                    </div>
                    <div class="col-sm-6">
                        <h3>Check-In Status Types</h3>
                        <div id="api-checkin-types"></div>
                    </div>
                </div>
            </section>
            <!--<h2 id="odata">Direct database access via OData</h2>
            <p>
                In addition to the above services there is a read only <a href="http://odata.org">OData</a> service for browsing our database directly at <code>http://api.openchargemap.io/odata/odata.svc</code> which is provided for direct programmatic access to our live database. The advantage of this is it provides an output which very closely matches our internal database structure so no data is lost in translation. You can view this data using a number of free OData browser tools including:
                <a href="http://metasapiens.com/sesame/data-browser/preview?cn-provider=OData&cn-Uri=http%3a%2f%2fapi.openchargemap.io%2fodata%2fodata.svc%2f" target="_blank">Sesame Data Browser (beta)</a> (external link)
            </p>
                -->
            <section>

                <h2 id="linking"><i class="fa fa-external-link"></i> Linking to OCM Content and Features</h2>
                <p>In addition to the API there are a number of standardised URLs which can be used to initiate certain actions, this can be useful to launch from within an app or for hyperlinking. The user can then sign in/register as required and proceed with the required action:</p>
                <h3>POI related actions</h3>
                <table class="table table-striped">
                    <tr><th>Action</th><th>URL</th></tr>
                    <tr><td>View POI Details</td><td><code>@Html.Raw(siteBaseUrl + "poi/details/{OCM-ID}")</code></td></tr>
                    <tr><td>Add a New POI</td><td><code>@Html.Raw(siteBaseUrl + "poi/add")</code></td></tr>
                    <tr><td>Add a Comment/Check-In to an existing POI</td><td><code>@Html.Raw(siteBaseUrl + "poi/addcomment/{OCM-ID}")</code> where <code>{OCM-ID}</code> is the numeric ID of the POI to add a comment to.</td></tr>
                    <tr><td>Add a Photo to an existing POI</td><td><code>@Html.Raw(siteBaseUrl + "poi/addmediaitem/{OCM-ID}")</code></td></tr>
                </table>
            </section>
        </article>
    </div>
</div>
<script type="text/javascript" src="~/js/OCM/SharedLibs/OCM_Data.js"></script>
<script type="text/javascript" src="~/js/OCM/TableOfContents.js"></script>
<script type="text/javascript">
    $(function () {
        prepareTableOfContents();

        fetchReferenceData();
    });

    var dataAPI = new OCM.API();

    function fetchReferenceData() {
        dataAPI.fetchCoreReferenceData("populateCoreReferenceData")
    }
    function populateCoreReferenceData(result) {
        if (result != null) {
            dataAPI.referenceData = result;
            dataAPI.sortCoreReferenceData();

            populateRefDataTable("api-comment-types", dataAPI.referenceData.UserCommentTypes);
            populateRefDataTable("api-checkin-types", dataAPI.referenceData.CheckinStatusTypes);
        }
    }

    function populateRefDataTable(elementId, referenceDataCollection) {

        var refDataTable = "<table class=\"table table-condensed table-striped\"><tr><th>ID</th><th>Title</th></tr>";
        for (var i = 0; i < referenceDataCollection.length; i++) {
            var item = referenceDataCollection[i];
            refDataTable += "<tr><td>" + item.ID + "</td><td>" + item.Title + "</td></tr>";
        }
        refDataTable += "</table>";

        $("#" + elementId).html(refDataTable);

    }
</script>